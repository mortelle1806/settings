" This line forces vim to use 256 colors even if it cannot detect this
" capability in the terminfo description. See tmux FAQ at tag 2.1.
set t_Co=256

" This is for WSL, see https://github.com/Microsoft/WSL/issues/1706
" Note: Commented because I use urxvt now and it prevents the code that
" modifies the cursor color to work fine.
"set term=screen-256color
"set t_ut=

" To disable a plugin, add it's bundle name to the following list
let g:pathogen_disabled = []

" Use this to disable a plugin
"call add(g:pathogen_disabled, '<name_of_plugin_to_disable>')

" Pathogen
execute pathogen#infect()
syntax on
filetype plugin indent on

" Allows auto loading fzf.vim
" NOTE: Even if ~/.fzf is present already, make sure it is *installed* using
" included script 'install'.
set rtp+=~/.fzf

" No sounds when cursor blocked or whatever
set visualbell

" Makes vim behave like most editors:
" - The current buffer can be put to the background without writing to disk;
" - When a background buffer becomes current again, marks and undo-history are remembered.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

set history=1000

syntax enable
set number
set ruler " shows in status line where you are in the file

set incsearch
set ignorecase " often you want to ignore case when searching for text
set smartcase  " will turn on case-sensitivity only if the text to search contains uppercase characters, which is what you often want
set autoindent

" Necessary since switch from vim 7.4 to 8.1.
set backspace=indent,eol,start

" Shows selection size information in bottom line while in visual mode
set showcmd

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" Will not cut words in the middle when wrap is on
set linebreak

" This makes sure a minimum number of lines is always visible above the cursor
set scrolloff=5

" Allows using the mouse to resize window splits!
" NOTE: Disabled because it prevents using copy-paste by mouse (the only way)
" in wsltty terminal.
"set mouse=n

" Disable the auto add of end of line character at end of file if missing.
" This is to avoid unwanted diffs with Windows users.
if v:version >= 800
    set nofixendofline
endif

" Make both horizontal and vertical splits do the split where I naturally expect them to
set splitright
set splitbelow

" Scroll the viewport (without moving the cursor) 3x faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Reduce number of lines travelled when using <C-D> and <C-U>
nnoremap <C-d> 7<C-d>
nnoremap <C-u> 7<C-u>

if !isdirectory($HOME . '/.vim/tmp')
    call mkdir($HOME . '/.vim/tmp', "p")
endif

" Tell vim where to put its backup files
" WARNING: Make sure directory exists or you can get weird errors (in NERDTree on opening, for instance)
set backupdir=~/.vim/tmp

" Tell vim where to put swap files
" WARNING: Make sure directory exists or you can get weird errors (in NERDTree on opening, for instance)
set dir=~/.vim/tmp

set background=dark

colorscheme PaperColor

" Background color approximation of what is in my Xresources in URxvt.background
" If you don't do this, by default vim will use all default colors of the
" terminal emulator, except for the background+foreground which will match
" with the chosen colorscheme.
hi Terminal ctermbg=234 ctermfg=grey

" <Leader>bg will switch color scheme between light and dark
" (restoring ModeMsg is important in this case, otherwise it's lost)
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>:hi ModeMsg ctermfg=white ctermbg=darkred<cr>

"<Leader> = \ by default

" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <Leader>S :source $MYVIMRC

" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
:nmap <Leader>v :e $MYVIMRC

"-----------------------------------
"This unsets the "last search pattern" register by hitting return
"nnoremap <CR> :noh<CR><CR>

"set cursorline
"hi CursorLine term=NONE cterm=NONE ctermbg=none ctermfg=none

hi ModeMsg ctermfg=white ctermbg=darkred

" Change Color when entering Insert Mode
" autocmd InsertEnter * highlight  CursorLine ctermbg=darkred ctermfg=white

" Revert Color to default when leaving Insert Mode
" autocmd InsertLeave * highlight  CursorLine ctermbg=none ctermfg=none

" enable status line always
set laststatus=2

" redraw only when we need to.
set lazyredraw

set wildmenu            " visual autocomplete for command menu

" Indicate that the specified cscope commands must put their results in the quickfix window.
" The minus sign indicates to clear the quickfix window before putting the results.
set cscopequickfix=s-,c-,d-,i-,t-,e-,g-

" Quick save all and exit without prompt even if a terminal buffer is open
nnoremap <Leader><Leader> :wa<CR>:qa!<CR>
if v:version >= 800
    tnoremap <Leader><Leader> <C-W>:wa<CR><C-W>:qa!<CR>
endif

" Don't wrap by default after startup
set nowrap

nnoremap <Leader>ww :call ToggleWrap()<CR>
function ToggleWrap()
    if &diff
        " Toggle wrap in all windows (works in vimdiff)
        " Do not show new value in current window because it would make a prompt to
        " continue after the result is output
        windo set wrap!
    else
        " Toggle wrap in current windows and show new value in current window.
        set wrap!
        set wrap?
    endif
endfunction

" Toggle paste with F2 (feedback is shown only when in insert mode)
if &term =~ "screen"
    set pastetoggle=<Esc>OQ
elseif &term =~ "rxvt"
    set pastetoggle=<Esc>[12~
endif

" Toggle search results highlighting
nnoremap <Leader>h :set hlsearch! hlsearch?<CR>

" Toggle showing whitespace characters
nnoremap <Leader>ws :set list! list?<CR>

" Show the whitespace characters
set listchars=space:·,tab:>-,trail:·,eol:$

" " Run search on word under cursor with Ack.vim
" Note: <C-R><C-W> inserts word under cursor when already in command mode)
" Note: Could have used g:ack_use_cword_for_empty_search to avoid the
" <C-R><C-W>
nnoremap <Leader>a :Ack<Space><C-R><C-W><CR>

" Prepare search in command mode with Ack.vim.
" User must then type what to look for and validate.
nnoremap <Leader>A :Ack<Space>
if v:version >= 800
    tnoremap <Leader>A <C-W><C-W>:Ack<Space>
endif

" Make Ack.vim use Ag if possible (much faster)
if executable('ag')
  let g:ackprg = 'ag --hidden --ignore .git --ignore tags --vimgrep'
endif

" Highlight searched term in file buffers and quickfix buffer
let g:ackhighlight = 1

" https://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
" Double escape clears search pattern
nnoremap <silent> <Esc><Esc> :let @/=""<CR>

" Immediately highlight all occurrences of current word in buffer
let g:HiCursorWords_style='term=NONE cterm=NONE ctermfg=green'
let g:HiCursorWords_delay=0

" Easy shortcut to switch terminal to Terminal-Normal mode
if v:version >= 800
    tnoremap `` <C-W>N
endif

inoremap <C-B> <3<Space>

iabbrev coeur cœur
iabbrev oeil œil
iabbrev ps: P.-S.:
iabbrev ps2: P.-S.2:
iabbrev 3c <3 <3 <3... :)
iabbrev 4c <3 <3 <3 <3... :)
iabbrev 5c <3 <3 <3 <3 <3... :)
iabbrev 6c <3 <3 <3 <3 <3 <3... :)
iabbrev 7c <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 8c <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 9c <3 <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 10c <3 <3 <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 11c <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 12c <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 13c <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 14c <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3... :)
iabbrev 15c <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3... :)

" Format current paragraph but keep cursor where it is
nnoremap <Leader>p gwap
inoremap <Leader>p <C-o>gwap

" This is for CTRL+n autocompletion while in insert mode.
" The above command will change the 'completeopt' option so that Vim's popup menu doesn't select the first completion item, but rather just inserts the longest common text of all matches; and the menu will come up even if there's only one match. (The longest setting is responsible for the former effect and the menuone is responsible for the latter.) 
set completeopt=longest,menuone

" The following will make the cursor move by display lines when long lines are wrapping
" Source: http://vim.wikia.com/wiki/Move_cursor_by_display_lines_when_wrapping
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Quick save file (only if changed) and restore previous mode if any
nmap <Leader>s :update<CR>
vmap <Leader>s <Esc><Leader>sgv
imap <Leader>s <c-o><Leader>s

" Back tick as replacement for Esc. Tab is good too but as soon as you start
" programming, you regret it.
imap ` <Esc>
vmap ` <Esc>

" Since tilda is now taken in insert mode, provide a way to write a tilda in
" insert mode using C-V C-V
inoremap <C-V><C-V> <C-V>u0060

" Make shift-Tab decrease indent like in most editors
inoremap <S-Tab> <C-d>

" Reload current file
nnoremap <Leader>r :e<CR>

" Activate patience algorithm by default.
" Can switch on the fly to another algorithm with :EnhancedDiff <...>
" Enhances diff a lot in some cases.
" Try vimdiff in .vim/bundle/vim-enhanced-diff/test/4
" Result screenshot in https://github.com/chrisbra/vim-diff-enhanced
if &diff
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif

" Toggle for ignoring whitespace in diff mode
" http://vim.wikia.com/wiki/Ignore_white_space_in_vimdiff
if &diff
    map <Leader>wi :call IwhiteToggle()<CR>
    function! IwhiteToggle()
        if &diffopt =~ 'iwhite'
            set diffopt-=iwhite
        else
            set diffopt+=iwhite
        endif
    endfunction
endif

" Set up cursor behaviour:
if &term =~ "xterm\\|rxvt\\|tmux\\|screen"
    " use a cursor of a certain color in insert mode
    " use a another cursor color otherwise
    if exists('$TMUX')
        " tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
        " Source: https://gist.github.com/andyfowler/1195581
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]12;red\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]12;gray\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]12;red\x7"
        let &t_EI = "\<Esc>]12;gray\x7"
    endif
    silent !echo -ne "\033]12;gray\007"
    " reset cursor when vim exits
    autocmd VimLeave * silent !echo -ne "\033]12;gray\007"
endif

" Makes yanking and pasting use the X clipboards. Prepend it because their is a
" default value already (probably the exclude statement in the default value
" is the cause)
" NOTE: unnamed only works with a WSL setup but not on pure Linux.
set clipboard^=unnamedplus,unnamed

" Disable default clipboard behavior that makes visual mode copy to clipboard
" on each change of visual selection.
set clipboard-=autoselect

" This makes the buffers created for terminal use to be marked as 'unlisted'.
" This prevents :bp and :bn to cycle on these windows and get stuck on the
" shell prompt if the terminal is not in normal mode. Another example of
" unlisted buffer is the NERDTree buffer. Type !ls to see all buffers included
" unlisted ones. Source for this solution: https://github.com/jalvesaq/Nvim-R/issues/340
" NOTE: DEACTIVATED BECAUSE IT PREVENTS USING term_sendkeys()
"autocmd TerminalOpen * set nobuflisted

" Follow vim-signify plugin recommendation by narrowing down list of vcs
let g:signify_vcs_list = [ 'git', 'perforce' ]

" Open a diff tab or close it with the same shortcut
nnoremap <Leader>d :call OpenOrCloseDiff()<CR>
function! OpenOrCloseDiff() " Add '!' to allow hot-reload of vimrc
    if &diff
        " This closes the diff tab that gets opened by :SignifyDiff
        tabc
    else
        " This opens a new tab with a diff inside, if there are changes
        SignifyDiff
    endif
endfunction

" Vim-perforce: Try to open the file in perforce when modifying a read-only file
let g:perforce_open_on_change = 1

" Vim-perforce: Do not prompt (prompting seems to cause issues when mass
" editing with :cdo)
let g:perforce_prompt_on_open = 0

" Disable automatic folds, especially useful for diffs: when a code diff is
" reverted by a user action, auto-folding can be very confusing visually.
" Just setting nofoldenable in vimrc does not work for vimdiff, which
" overrides it later, even if using WinEnter events.
" Tip found here: https://stackoverflow.com/questions/5017009/confusion-about-vim-folding-how-to-disable
set diffopt+=context:99999

" Open FZF. The selected file will get opened in the current window.
nnoremap <Leader>F :FZF<CR>
if v:version >= 800
    tnoremap <Leader>F <C-W>:FZF<CR>
endif

nnoremap <Leader>ff :FZF<CR>
if v:version >= 800
    tnoremap <Leader>ff <C-W>:FZF<CR>
endif

nnoremap <Leader>ft :Tags<CR>
if v:version >= 800
    tnoremap <Leader>ft <C-W>:Tags<CR>
endif

nnoremap <Leader>fl :Ag<CR>
if v:version >= 800
    tnoremap <Leader>fl <C-W>:Ag<CR>
endif

nnoremap <Leader>fL :BLines<CR>
if v:version >= 800
    tnoremap <Leader>fL <C-W>:BLines<CR>
endif

nnoremap <Leader>fb :Buffers<CR>
if v:version >= 800
    tnoremap <Leader>fb <C-W>:Buffers<CR>
endif

nnoremap , :Buffers<CR>

" Override fzf.vim's version because it does not include the options below
" Option --color-match is here to avoid the whole line to be highlighted as a
" match, which makes the result less readable.
" Color codes reference: https://misc.flogisoft.com/bash/tip_colors_and_formatting
" The delimiter option is here to only match on line content, not on the file
" name like default. See https://github.com/junegunn/fzf.vim/issues/346
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--hidden --ignore .git --ignore obj --ignore tags --color-match "1;36"', {'options': '--delimiter : --nth 4..'}, <bang>0)

" Prevent vim-filebeagle from overriding our mappings 
let g:filebeagle_suppress_keymaps = 1

nmap <Leader>e :FileBeagleBufferDir<CR>
if v:version >= 800
    tmap <Leader>e <C-W>:FileBeagleBufferDir<CR>
endif

nmap <Leader>E :FileBeagle<CR>
if v:version >= 800
    tmap <Leader>E <C-W>:FileBeagle<CR>
endif

let g:filebeagle_show_hidden = 1

" Previous/next window
nmap [w :wincmd W<CR>
nmap ]w :wincmd w<CR>
if v:version >= 800
    tmap [w <C-W>:wincmd W<CR>
    tmap ]w <C-W>:wincmd w<CR>
endif

" Previous/next buffer (original commands)
nmap [b :bprevious<CR>
nmap ]b :bnext<CR>
if v:version >= 800
    tmap [b <C-W>:bprevious<CR>
    tmap ]b <C-W>:bnext<CR>
endif

" Previous/next buffer (only cycles through buffers opened in current window) 
" NOTE: Use vim-bufkill buffer backward-forward commands because they successfully
" avoid that an open built-in terminal buffer gets used. In fact it seems that
" it successfully cycles only in buffers actually opened in the current
" window, which is exactly what I want.
nmap_[B :BB<CR>
nmap ]B :BF<CR>
if v:version >= 800
    tmap_[B <C-W>:BB<CR>
    tmap ]B <C-W>:BF<CR>
endif

" Previous/next tab
nmap [T :tabprevious<CR>
nmap ]T :tabnext<CR>
if v:version >= 800
    tmap [T <C-W>:tabprevious<CR>
    tmap ]T <C-W>:tabnext<CR>
endif

" Previous/next tag
nmap [t :tprevious<CR>
nmap ]t :tnext<CR>
if v:version >= 800
    tmap [t <C-W>:tprevious<CR>
    tmap ]t <C-W>:tnext<CR>
endif

" Go to previous error in quickfix window
" Go to next error in quickfix window
" NOTE: This overrides the ( and ) built-in shortcuts, which are
" useful but I don't use so far.
" NOTE: Cannot use nnoremap here, explanation:
" https://www.reddit.com/r/vim/comments/78izt4/please_help_understand_how_to_use_plug_mapping/
nmap ( <Plug>(qf_qf_previous)
nmap ) <Plug>(qf_qf_next)

" Previous/next entry in quickfix list (vim-qf plugin, with wrapping)
nmap [q <Plug>(qf_qf_previous)
nmap ]q <Plug>(qf_qf_next)
if v:version >= 800
    tmap [q <Plug>(qf_qf_previous)
    tmap ]q <Plug>(qf_qf_next)
endif

" Previous/next file in quickfix list (original commands, no wrapping)
nmap [Q :cNfile<CR>
nmap ]Q :cnfile<CR>
if v:version >= 800
    tmap [Q <C-W>:cNfile<CR>
    tmap ]Q <C-W>:cnfile<CR>
endif

" Previous/next entry in location list (vim-qf plugin, with wrapping)
nmap [l <Plug>(qf_loc_previous)
nmap ]l <Plug>(qf_loc_next)
if v:version >= 800
    tmap [l <Plug>(qf_loc_previous)
    tmap ]l <Plug>(qf_loc_next)
endif

" Previous/next file in location list (original commands, no wrapping)
nmap [L :lNfile<CR>
nmap ]L :lnfile<CR>
if v:version >= 800
    tmap [L <C-W>:lNfile<CR>
    tmap ]L <C-W>:lnfile<CR>
endif

" Go to first location of tag
nmap gt :exe "tag " . expand("<cword>")<CR>

" Open preview window to first location of tag
nmap gp :exe "ptag " . expand("<cword>")<CR>

if has('gui_running')
  set guioptions-=T  " no toolbar
  set lines=30 columns=80 linespace=0
  if has('gui_win32')
    set guifont=DejaVu_Sans_Mono:h10:cANSI
  else
    set guifont=Monospace\ 14
  endif
endif

" This is for vim-fugitive's Gbrowse command. Defining the :Browse command
" prevents the fallback usage of netrw, which seems to require a patch
" not available in vim 8.1.
" Inspired from https://github.com/tpope/vim-fugitive/issues/594#issuecomment-73450823
function! s:Browse(args)
    execute 'silent !sensible-browser '.shellescape(a:args, 1)
    redraw!
endfunction
command! -nargs=* Browse call <SID>Browse(<q-args>)
